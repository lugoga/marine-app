sst.bin %>% rasterToPolygons() %>% as("sf") %>% mutate(area = st_area(geometry) %>% as.numeric(), area = area/1000000, total.area = sum(area))
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
mutate(area = st_area(geometry) %>% as.numeric(),
area = area/1000000,
total.area = sum(area))
upwelling.poly
upwelling.poly %>% st_combine()
upwelling.poly %>% st_combine() %>% st_as_sf()
upwelling.poly %>% st_combine() %>% st_as_sf() %>% plot()
upwelling.poly %>% st_union() %>% st_as_sf() %>% plot()
upwelling.poly %>% st_union() %>% st_as_sf()
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
mutate(area = st_area(geometry) %>% as.numeric(),
area = area/1000000)
sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union()
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
st_as_sf() %>%
mutate(area = st_area(geometry) %>% as.numeric(),
area = area/1000000)
sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
st_as_sf()
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
st_as_sf()
upwelling.poly
st_area(upwelling.poly)
st_area(upwelling.poly)/1000000
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
st_as_sf()
upwelling.poly
area = st_area(upwelling.poly)/1000000
area
area = as.numeric(st_area(upwelling.poly)/1000000)
area
upwelling.poly %>%
tm_shape() +
tm_polygons()
upwelling.poly %>%
tm_shape() +
tm_polygons(col = "green")
upwelling.poly %>%
tm_shape() +
tm_polygons(col = "green", alpha = .1)
upwelling.poly %>%
tm_shape() +
tm_polygons(col = "green", alpha = .4)
upwelling.poly %>%
tm_shape() +
tm_polygons(col = "red", alpha = .4)
upwelling.poly %>%
mutate(area = area)
upwelling.poly %>%
mutate(area = area) %>%
tm_shape() +
tm_polygons(col = "red", alpha = .4, pop.var = c("Area" = "area"))
upwelling.poly %>%
mutate(area = area, name = "Upwelling") %>%
tm_shape() +
tm_polygons(col = "red", alpha = .4,id = "upwelling" pop.var = c("Area" = "area"))
upwelling.poly %>%
mutate(area = area, name = "Upwelling") %>%
tm_shape() +
tm_polygons(col = "red", alpha = .4,id = "upwelling", pop.var = c("Area" = "area"))
upwelling.poly = sst.bin %>%
rasterToPolygons() %>%
as("sf") %>%
st_union() %>%
st_as_sf()
area = as.numeric(st_area(upwelling.poly)/1000000)
upwelling.poly %>%
mutate(area = area, name = "Upwelling") %>%
tm_shape() +
tm_polygons(col = "red", alpha = .4,
id = "upwelling", pop.var = c("Area" = "area"))
runApp('coastal_dashboard')
zenji = read_csv("coastal_dashboard/data/meteo_zanzibar.csv")
zenji
zenji = read_csv("coastal_dashboard/data/meteo_zanzibar.csv") %>%
drop_na(air_temp)
zenji
zenji %>%
ggplot(aes(x = date, y = air_temp))+
geom_line()
zenji %>%
filter(date > lubridate::dmy(010101)) %>%
ggplot(aes(x = date, y = air_temp))+
geom_line()
zenji %>%
filter(date > lubridate::dmy(010101)) %>%
ggplot(aes(x = date, y = air_temp))+
geom_line()+
geom_smooth()
zenji
zenji %>%
filter(date > lubridate::dmy(010101)) %>%
ggplot(aes(x = date, y = ws))+
geom_line()+
geom_smooth()
zenji %>%
filter(date > lubridate::dmy(010101)) %>%
ggplot(aes(x = date, y = visibility))+
geom_line()+
geom_smooth()
zenji %>%
filter(date > lubridate::dmy(010101)) %>%
ggplot(aes(x = date, y = precip))+
geom_line()+
geom_smooth()
remotes::install_github("ArgoCanada/argodata")
125000+50000+100000+40000
knitr::opts_chunk$set(echo = TRUE)
prof =  vroom::vroom("d:/semba/argodata/argo_prof.csv")
tz = prof %>% filter(between(longitude,38,45), between(latitude,-14,-3))
require(tidyverse)
require(tidyverse)
require(argodata)
require(sf)
tz = prof %>% filter(between(longitude,38,45), between(latitude,-14,-3))
tz.sf = tz %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
tz.sf%>% mapview::mapview()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -6, longitude = 40, radius = 500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels
prof_gulf_pemba_channel
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels
levels %>%
distinct(n_prof)
levels
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
level.location %>%
filter(pres == 200) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -6, longitude = 35, radius = 500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels %>%
distinct(n_prof)
levels
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
level.location %>%
filter(pres == 200) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
level.location
level.location %>%
filter(pres == 0) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -6, longitude = 40, radius = 500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -6, longitude = 38, radius = 500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels %>%
distinct(n_prof)
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels %>%
distinct(n_prof)
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
level.location %>%
filter(pres == 0) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
level.location %>%
filter(pres == 50) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -8, longitude = 38, radius = 1500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -8, longitude = 38, radius = 100) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
prof_gulf_pemba_channel
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -8, longitude = 38, radius = 1000) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
prof_gulf_pemba_channel
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels
levels %>%
distinct(n_prof)
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
require(mgcViz)
require(magrittr)
require(raster)
require(leaflet)
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(psal ~ s(longitude, latitude)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
crs(ras.argo) = 4326
## increase resolution
ras.argo = ras.argo %>%
disaggregate(fact = 20)
pal3 = leaflet::colorNumeric(c("#7f007f", "#0000ff",  "#007fff", "#00ffff", "#00bf00", "#7fdf00",
"#ffff00", "#ff7f00", "#ff3f00", "#ff0000", "#bf0000"), values(ras.argo),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
level.location
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam()
ras.argo = level.location %>%
level.location %>%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam()
level.location
level.location %>%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam()
level.location
level.location
level.location %>%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres))
level.location %$%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam()
ras.argo = level.location %$%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
ras.argo = level.location %$%
# filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam()
ras.argo
ras.argo %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()
ras.argo %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()
ras.argo %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()+
scale_fill_gradientn(values = oce::oce.colors9A(120))
ras.argo %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()+
scale_fill_gradientn(colours = oce::oce.colors9A(120))
argo.prof = level.location %>%
filter(pres < 500) %$%
gam(psal ~ s(longitude, pres)) %>%
tidymv::predict_gam()
argo.prof %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()+
scale_fill_gradientn(colours = oce::oce.colors9A(120))
argo.prof = level.location %>%
filter(pres < 2000) %$%
gam(psal ~ s(longitude, pres)) %>%
tidymv::predict_gam()
argo.prof %>%
ggplot(aes(x = longitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()+
scale_fill_gradientn(colours = oce::oce.colors9A(120))
argo.prof = level.location %>%
filter(pres < 2000 & longitude < 41) %$%
gam(psal ~ s(latitude, pres)) %>%
tidymv::predict_gam()
argo.prof
argo.prof %>%
ggplot(aes(x = latitude, y = pres, z = fit))+
metR::geom_contour_fill()+
scale_y_reverse()+
scale_fill_gradientn(colours = oce::oce.colors9A(120))
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
level.location %>%
filter(pres == 50) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
prof_gulf_pemba_channel <- prof %>%
argo_filter_radius(latitude = -6, longitude = 40, radius = 500) %>%
argo_filter_date("2000-01-01", "2021-12-01") %>%
argo_filter_data_mode("delayed")
levels <- prof_gulf_pemba_channel %>%
argo_prof_levels()
levels %>%
distinct(n_prof)
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% select(file:longitude))
level.location = levels %>%
left_join(prof_gulf_pemba_channel %>% dplyr::select(file:longitude))
level.location %>%
filter(pres == 50) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
level.location %>%
filter(pres == 50) %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
mapview::mapview()
require(mgcViz)
require(magrittr)
require(raster)
require(leaflet)
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(psal ~ s(longitude, pres)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
level.location %>%
filter(pres == 200)
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(psal ~ s(longitude, latitude)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
crs(ras.argo) = 4326
ras.argo = ras.argo %>%
disaggregate(fact = 20)
pal3 = leaflet::colorNumeric(c("#7f007f", "#0000ff",  "#007fff", "#00ffff", "#00bf00", "#7fdf00",
"#ffff00", "#ff7f00", "#ff3f00", "#ff0000", "#bf0000"), values(ras.argo),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
ras.argo = level.location %>%
filter(pres == 200) %$%
gam(temp ~ s(longitude, latitude)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
crs(ras.argo) = 4326
## increase resolution
ras.argo = ras.argo %>%
disaggregate(fact = 20)
pal3 = leaflet::colorNumeric(c("#7f007f", "#0000ff",  "#007fff", "#00ffff", "#00bf00", "#7fdf00",
"#ffff00", "#ff7f00", "#ff3f00", "#ff0000", "#bf0000"), values(ras.argo),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
ras.argo = level.location %>%
filter(pres == 20) %$%
gam(temp ~ s(longitude, latitude)) %>%
# gam.check()
# mgcViz::getViz() %>%
# plot() %>%
tidymv::predict_gam() %>%
dplyr::select(longitude:fit) %>%
rasterFromXYZ()
crs(ras.argo) = 4326
## increase resolution
ras.argo = ras.argo %>%
disaggregate(fact = 20)
pal3 = leaflet::colorNumeric(c("#7f007f", "#0000ff",  "#007fff", "#00ffff", "#00bf00", "#7fdf00",
"#ffff00", "#ff7f00", "#ff3f00", "#ff0000", "#bf0000"), values(ras.argo),
na.color = "transparent")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
leaflet(data = ras.argo) %>%
addTiles() %>%
addRasterImage(
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo , project = TRUE,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
leaflet() %>%
addTiles() %>%
addRasterImage(x = ras.argo ,
project = TRUE,
colors = pal3,
opacity = 1) %>%
# setView(lng = 39.5, lat = -5.2, zoom = 9) %>%
addLegend(pal = pal3, values = values(ras.argo),
title = "Temperature")
shiny::runApp('coastal_dashboard')
